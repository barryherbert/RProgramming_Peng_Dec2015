R Programming
Roger Peng
Dec 2015

Student: Barry Herbert

## makeCacheMatrix creates a list contains four functions

makeCacheMatrix <- function(x = matrix()) {
        inverse <- NULL
        set <- function(y) {
                Matrx <<- y
                Inverse <<- NULL
        }
        get <- function() Matrx
        setInverse <- function(inverse) Inverse <<- inverse
        getInverse <- function() Inverse
        list(set = set, get = get,
             setInverse = setInverse,
             getInverse = getInverse)
}	
	
## cacheSolve calculates the inverse of the matrix Matrx on the first call
## cacheSolve returns “cached” matrix Matrx on each subsequent call

cacheSolve <- function(x, ...) {
        Inverse <- x$getInverse()
        if(!is.null(Inverse)) {
                message("getting cached data")
                return(Inverse)
        }
        data <- x$get()
        inverse <- solve(data)
        x$setInverse(inverse)
        inverse
}

Matrx <- array(1:4, dim=c(3,3))   ## Create a matrix that can be inverted
flist <- makeCacheMatrix()           ## Create the list of four functions
flist$set (Matrx)                              ## “Set” the matrix Matrx
cacheSolve(flist)                              ## Get the inversed matrix (cached on all but first call)
